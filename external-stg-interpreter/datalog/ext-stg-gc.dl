
// input model

.decl Reference(from : symbol, to : symbol)
.input Reference
.output Reference

.decl GCRoot(val : symbol)
.input GCRoot
.output GCRoot

// output

.decl Live(val : symbol)
.output Live

// traversal

Live(ref) :- GCRoot(ref).

Live(to) :-
  Live(from),
  Reference(from, to).

.decl All(val : symbol)

All(from),
All(to) :-
  Reference(from, to).

All(val) :-
  GCRoot(val).

.decl Dead(val : symbol)
.output Dead

Dead(val) :-
  All(val),
  !Live(val).

// the inverse of the reference relation, but only for live values
.decl LiveReferredBy(to : symbol, from : symbol)
.output LiveReferredBy

LiveReferredBy(to, from) :-
  Reference(from, to),
  Live(from),
  Live(to).
