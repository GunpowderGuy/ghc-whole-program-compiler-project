/*
  PNode origin
    - function as value: argument, move, return value ; only for know functions
    - mutvar atomic primop ; only for known functions

  ExecCall origin ; utility relation or CFA module (internal use)
    - AST call ; handled in Escape.dl
    - CallPNode1
    - CallPNode2

  INVARIANT:
    ApplyChain contains only known function

*/

/*
  unknown function call cases:
    - ast call                      ; unknown function is directly called in the AST ; handled in Escape.dl
    - CallPNode1 / CallPNode2 call  ; unknown function is called by a primop
    - ApplyChain call               ; unknown function is called in an overapplication

*/

// CASE: ApplyChain can not consume all call argument due to unknown function

// arguments
USED("Escape-CFA-ApplyChain-arguments")
Escaped(arg) :-
  ApplyChain(ns, r, fun, _, consumed, arg_count),
  consumed < arg_count,
  ReturnValue(fun, unknown_pnode),
  OuterOrigin(unknown_pnode),
  // remaining call arguments
  call_arg_i >= consumed,
  call_arg_i < arg_count,
  ExecCallArgument(ns, r, _, call_arg_i, arg).

// return value
USED("Escape-CFA-ApplyChain-return-value")
PointsTo(r, "outer-origin") :-
  ApplyChain(_, r, fun, _, consumed, arg_count),
  consumed < arg_count,
  ReturnValue(fun, unknown_pnode),
  OuterOrigin(unknown_pnode).

// CASE: CallPNode1 / CallPNode2 call for unknown function

// arguments
USED("Escape-CFA-ExecCall-arguments")
Escaped(arg) :-
  ExecCallArgument(_, _, unknown_fun, _, arg),
  OuterOrigin(unknown_fun).

// return value
USED("Escape-CFA-ExecCall-return-value")
PointsTo(r, "outer-origin") :-
  ExecCall(_, r, unknown_fun, _),
  OuterOrigin(unknown_fun).

// CASE: escaping PNode

// arguments: mark the unbound function parameters escaped
USED("Escape-CFA-escaped-PNode-args")
Escaped(p) :-
  PNode(r, fun, arity, missing),
  OuterOrigin(r),
  arity - missing <= i, i < arity,
  CodeParameter(fun, i, p).

// return value: mark the function return value escaped
USED("Escape-CFA-escaped-PNode-return-value")
Escaped(v) :-
  PNode(r, fun, _, _),
  OuterOrigin(r),
  ReturnValue(fun, v).

/*
  Q: what about escaping:
      + constructors?
      + primop results?
*/
