/*
  HINT: is interpreted -/+

  primop effectful
    + "fork#"                 :: %a -> {"State#" {RealWorld}} -> {"ghc-prim_GHC.Prim.Unit#" {"ThreadId#"}}
    + "forkOn#"               :: T_Int64 -> %a -> {"State#" {RealWorld}} -> {"ghc-prim_GHC.Prim.Unit#" {"ThreadId#"}}
    + "killThread#"           :: {"ThreadId#"} -> %a -> {"State#" {RealWorld}} -> {"ghc-prim_GHC.Prim.(##)"}
    - "yield#"                :: {"State#" {RealWorld}} -> {"ghc-prim_GHC.Prim.(##)"}
    - "myThreadId#"           :: {"State#" {RealWorld}} -> {"ghc-prim_GHC.Prim.Unit#" {"ThreadId#"}}
    - "labelThread#"          :: {"ThreadId#"} -> T_Addr -> {"State#" {RealWorld}} -> {"ghc-prim_GHC.Prim.(##)"}
    - "isCurrentThreadBound#" :: {"State#" {RealWorld}} -> {"ghc-prim_GHC.Prim.Unit#" T_Int64}
    - "noDuplicate#"          :: {"State#" %s} -> {"ghc-prim_GHC.Prim.(##)"}
    - "threadStatus#"         :: {"ThreadId#"} -> {"State#" {RealWorld}} -> {"ghc-prim_GHC.Prim.(#,,#)" T_Int64 T_Int64 T_Int64}
*/


// "killThread#" :: {"ThreadId#"} -> %a -> {"State#" {RealWorld}} -> {"ghc-prim_GHC.Prim.(##)"}
// collect raised exceptions
USED("PrimOp-Concurrency-01")
Called(r, "killThread#"),
RaisedEx(ex) :-
  REACHABLE(r)
  Call(r, "killThread#", _),
  CallArgument(r, 1, ex).

/*
// "fork#" :: %a -> {"State#" {RealWorld}} -> {"ghc-prim_GHC.Prim.Unit#" {"ThreadId#"}}
// TODO: ignore the result
USED("PrimOp-Concurrency-02")
Called(r, "fork#"),
ExecCall("fork#-thunk", r, v0, 0) :-
  REACHABLE(r)
  Call(r, "fork#", _),
  CallArgument(r, 0, v0).

// "forkOn#" :: T_Int64 -> %a -> {"State#" {RealWorld}} -> {"ghc-prim_GHC.Prim.Unit#" {"ThreadId#"}}
// TODO: ignore the result
USED("PrimOp-Concurrency-03")
Called(r, "forkOn#"),
ExecCall("forkOn#-thunk", r, v0, 0) :-
  REACHABLE(r)
  Call(r, "forkOn#", _),
  CallArgument(r, 1, v0).
*/

// TODO: future work
Error(r, cat("Unsupported (reachable) primop: ", op)) :-
  ( op = "fork#"
  ; op = "forkOn#"
  ),
  REACHABLE(r)
  Call(r, op, _).
